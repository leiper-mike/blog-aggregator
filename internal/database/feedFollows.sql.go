// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feedFollows.sql

package database

import (
	"context"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH feed_follow as (INSERT INTO feed_follows(id, created_at, updated_at, feed_id, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, feed_id, user_id)
SELECT 
feed_follow.id, feed_follow.created_at, feed_follow.updated_at, feed_follow.feed_id, feed_follow.user_id,
feeds.name as feed_name,
users.name as user_name
FROM feed_follow
INNER JOIN feeds ON feed_follow.feed_id = feeds.id
INNER JOIN users ON feed_follow.user_id = users.id
`

type CreateFeedFollowParams struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    int32
	UserID    int32
}

type CreateFeedFollowRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    int32
	UserID    int32
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FeedID,
		arg.UserID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.UserID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE 
FROM feed_follows
WHERE user_id = $1 AND feed_id = $2
`

type DeleteFeedFollowParams struct {
	UserID int32
	FeedID int32
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.FeedID)
	return err
}

const getFeedFollowsByUserId = `-- name: GetFeedFollowsByUserId :many
WITH feed_follow as(select id, created_at, updated_at, feed_id, user_id 
from feed_follows
where feed_follows.user_id = $1)
SELECT 
feed_follow.id, feed_follow.created_at, feed_follow.updated_at, feed_follow.feed_id, feed_follow.user_id,
feeds.name as feed_name,
users.name as user_name
FROM feed_follow
INNER JOIN feeds ON feed_follow.feed_id = feeds.id
INNER JOIN users ON feed_follow.user_id = users.id
`

type GetFeedFollowsByUserIdRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    int32
	UserID    int32
	FeedName  string
	UserName  string
}

func (q *Queries) GetFeedFollowsByUserId(ctx context.Context, userID int32) ([]GetFeedFollowsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsByUserIdRow
	for rows.Next() {
		var i GetFeedFollowsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.UserID,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
